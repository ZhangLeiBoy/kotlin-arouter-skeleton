apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply from: '../build_androidx.gradle'
apply from: '../build_kotlin.gradle'

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

android {
    compileSdkVersion rootProject.CompileSdkVersion

    defaultConfig {
        applicationId = rootProject.Package_Name
        versionName = rootProject.Version_Name
        versionCode = rootProject.Version_Code
        minSdkVersion rootProject.MinSdkVersion
        targetSdkVersion rootProject.TargetSdkVersion
        multiDexEnabled true

        manifestPlaceholders = [
                App_Name          : rootProject.App_Name,
                Package_Name      : rootProject.Package_Name,
                MINESDKVERSION    : rootProject.MinSdkVersion,
                TARGETSDKVERSION  : rootProject.TargetSdkVersion,
                PACKAGE_NAME      : rootProject.Package_Name,
        ]

        ndk {
            // 设置支持的 SO 库构架
            abiFilters 'armeabi-v7a'
//      ,'armeabi', 'arm64-v8a', 'x86' , 'x86_64', 'mips', 'mips64'
        }
    }

    //设置签名信息
    signingConfigs {
        debug {
            //填写之前Eclipse-Build里面的默认路径
            storeFile file("../debug.keystore")
        }
        release {
            //填写之前Eclipse-Build里面的默认路径
            storeFile file("../release.keystore")
            keyAlias rootProject.KeyAlias
            storePassword rootProject.StorePassword
            keyPassword rootProject.KeyPassword
        }
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def apkName = rootProject.App_Name + "_v" + rootProject.Version_Name + "_" + rootProject.Version_Code + ".apk"
            outputFileName = apkName
        }
    }

    splits {
        abi {
            enable true
            reset()
        }
    }

    buildTypes {
        debug {
            manifestPlaceholders = [app_icon: "@mipmap/logo"]

            signingConfig signingConfigs.debug
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            manifestPlaceholders = [app_icon: "@mipmap/logo"]

            signingConfig signingConfigs.release
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //忽略校验png格式图片
    aaptOptions {
        cruncherEnabled = false
    }
    //取消检查
    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    kapt "com.alibaba:arouter-compiler:$arouter_compiler_version"
    api project(":BaseLibrary")
    api project(":ModHome")
    api project(":ModUser")
}
